%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%  Single molecule FRET trace viewer
%%%  It reads a ".traces" file generated by "SingleMoleculeImageAnalyzer" 
%%%   and visualize intensity and FRET traces of each molecule
%%%     (see https://github.com/kahutia/SingleMoleculeImageAnalyzer)
%%%
%%%   written and distributed by Sung Hyun Kim (ifolium@gmail.co)
%%%                                         CC BY-NC-SA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function str()

%% get file info
mfile_path=mfilename('fullpath');
tokens=strfind(mfile_path,'\');
mfile_path=mfile_path(1:tokens(end)-1);
if exist([mfile_path '\pgdata\pgdata_str.mat'],'file')
	load([mfile_path '\pgdata\pgdata_str.mat']);
else
    pth='c:\';
end

[fname,pth,~]=uigetfile([pth '\*.traces'],'Chooose traces files');
if ~exist([mfile_path '\pgdata'],'dir'),    mkdir([mfile_path '\pgdata']);  end
save([mfile_path '\pgdata\pgdata_str.mat'],'pth');


%% get molecule position info
tokens=strfind(fname,'.');
fname_base=fname(1:tokens(end)-1);
mol_pos=load([pth '\' fname_base '.pos']);

%% get CCD image
img_org=imread([pth '\' fname(1:tokens(end-1)-1) '_org.tif']);
if exist([pth '\' fname(1:tokens(end-1)-1) '_mer.tif'],'file');
    img_merged=imread([pth '\' fname(1:tokens(end-1)-1) '_mer.tif']);
else
    img_merged=[];
end
draw_ccd_image(img_org,img_merged);

%% read data
fid=fopen([pth fname],'r');
len=fread(fid,1,'int32');
disp(['Traces length: ' num2str(len)])
Ntraces=fread(fid,1,'int16');
N_mol=Ntraces/2;
disp(['The number of molecule: ' num2str(N_mol)]);
raw=fread(fid,Ntraces*len,'int16');
disp('Done reading data.');
fclose(fid);

%% convert into donor and acceptor traces
Data=reshape(raw,Ntraces,len);
donor_org=Data(1:2:end,:);
acceptor_org=Data(2:2:end,:);

%% build FRET vs Int histograms
draw_FRETvsInt(donor_org,acceptor_org);

%% Show the intensity histograms for the first frames and the last frames
draw_int_hist(donor_org,acceptor_org);

%% draw averaged trace
draw_avr_trace(donor_org,acceptor_org);

%% show std distribution
figure(22);clf
std_d=std(donor_org,0,2);
std_a=std(acceptor_org,0,2);
totali_org=donor_org+acceptor_org;
std_i=std(totali_org,0,2);
% std_i=std(totali_org,0,2)./mean(totali_org,2);

[std_hd,std_dx]=hist(std_d,50);
[std_ha,std_ax]=hist(std_a,50);
[std_hi,std_ix]=hist(std_i,50);
% [std_hi,std_ix]=hist(std_i,0:0.1:10);

subplot(3,1,1);
bar(std_dx,std_hd,1,'FaceColor',[0 1 0]); hold on;
subplot(3,1,2);
bar(std_ax,std_ha,1,'FaceColor',[1 0 0]);
subplot(3,1,3);
bar(std_ix,std_hi,1,'FaceColor',[.5 .5 .5]); hold off;

alpha 0.5;
%% get parameters
p=get_parameters();
[time, ~, ~, ~, acceptor_bgl, donor_bl]=make_correction(p,len,donor_org,acceptor_org);

%% plot averaged time traces
draw_avr_trace(donor_bl,acceptor_bgl,time);

%% build FRET vs Int histograms
draw_FRETvsInt(donor_bl,acceptor_bgl);

%% Show the intensity histograms for the first frames and the last frames
draw_int_hist(donor_bl,acceptor_bgl,p);


%% Reject junks

% reject too high or too low intensities
D_int_init=mean(donor_bl(:,2:11),2);
A_int_init=mean(acceptor_bgl(:,2:11),2);
T_int_init=D_int_init+A_int_init;
valid_id(:,1) = T_int_init > p.total_int_range(1) & T_int_init< p.total_int_range(2);

% reject too high or too low std
p.std_range=[500 1500];
valid_id(:,2) = valid_id(:,1);

% reject photobleached
if p.t_check_point~=-1
    D_int_init=mean(donor_bl(:,p.t_check_point-5:p.t_check_point+4),2);
    A_int_init=mean(acceptor_bgl(:,p.t_check_point-5:p.t_check_point+4),2);
    T_int_init=D_int_init+A_int_init;
    valid_id(:,3) = T_int_init > p.total_int_range(1) & T_int_init < p.total_int_range(2);
else
    valid_id(:,3) = valid_id(:,1);
end
% update data
valid_id_final=~sum(~valid_id,2);

N_mol_sel=sum(valid_id_final);
mol_pos_sel=mol_pos(valid_id_final,:);
acceptor_sel=acceptor_bgl(valid_id_final,:);
donor_sel=donor_bl(valid_id_final,:);
acceptor_sel_org=acceptor_sel;
donor_sel_org=donor_sel;

%% sort molecules

[mol_pos_sel, acceptor_sel,donor_sel,sorted_property]=sort_molecules(mol_pos_sel, acceptor_sel,donor_sel,p.sortby);

%% Run for each trace
fileindex=1;
roi=6;

[img_size_x,img_size_y,~]=size(img_org);
img_org_ext=uint8(zeros(img_size_x+roi*2,img_size_y+roi*2,3));
img_org_ext(roi+1:img_size_x+roi,roi+1:img_size_y+roi,:)=img_org;

[img_size_x,img_size_y,~]=size(img_merged);
img_merged_ext=uint8(zeros(img_size_x+roi*2,img_size_y+roi*2,3));
img_merged_ext(roi+1:img_size_x+roi,roi+1:img_size_y+roi,:)=img_merged;

error_range=500;
p.total_int_range=[p.total_int_range(1)-error_range, p.total_int_range(2)+error_range]; 
t_win_memory=0;

i=0;
while i < N_mol_sel
    i = i + 1 ;
    if t_win_memory==0
        p.t_window_in_trace=[0 time(end)];
    else
        t_win_memory=0;
    end
    draw_ccd_image(img_org,img_merged,mol_pos_sel(i,:),img_org_ext,img_merged_ext,roi);
       
    %% select the trace
    fretE=acceptor_sel(i,:)./(acceptor_sel(i,:)+donor_sel(i,:));
    totali=acceptor_sel(i,:)+donor_sel(i,:);
    fretE(isinf(fretE))=-0.5;% This is to avoid undefined fretE interfering with future analysis
    
    %% remove blinking and bleaching
	
    tmp_span=20;    % must be even number
    for tti=1:len
        pointer1=tti-tmp_span/2;
        pointer2=tti+tmp_span/2;
        if pointer1<1, pointer1=1;  end
        if pointer2>len, pointer2=len;   end
        totali_smooth(tti,1)=median(totali(pointer1:pointer2));
    end
    healthy_frames1 = totali_smooth > p.total_int_range(1) & totali_smooth < p.total_int_range(2); 
    
    totali_smooth=smooth(totali,3);
    healthy_frames2 = totali_smooth > p.total_int_range(1) & totali_smooth < p.total_int_range(2); 
    healthy_frames2(2:end-1)=healthy_frames2(1:end-2).*healthy_frames2(2:end-1).*healthy_frames2(3:end);    
    
    healthy_frames=boolean(healthy_frames2.*healthy_frames1);
    
    donor_cut=donor_sel(i,:);
    donor_cut(~healthy_frames)=nan;
    acceptor_cut=acceptor_sel(i,:);
    totali_cut=totali;
    totali_cut(~healthy_frames)=nan;
    acceptor_cut(~healthy_frames)=nan;    
    fretE_cut=fretE;
    fretE_cut(~healthy_frames)=nan;
    
    %% binning
    if p.num_bin ~= 0
        binlen=floor(len/p.num_bin);
        bintime=zeros(binlen,1);
        binE=zeros(binlen,1);
        binD=zeros(binlen,1);
        binA=zeros(binlen,1);
        for m=1:binlen
            bintime(m)=(m-1)*p.timeunit*p.num_bin;
            for mm=0:p.num_bin-1
                binE(m)=binE(m)+fretE_cut(p.num_bin*m-mm);
                binD(m)=binD(m)+donor_cut(i,p.num_bin*m-mm);
                binA(m)=binA(m)+acceptor_cut(i,p.num_bin*m-mm);
            end
            binE(m)=binE(m)/p.num_bin;
            binD(m)=binD(m)/p.num_bin;
            binA(m)=binA(m)/p.num_bin;
        end
    end
    
    
    %% plot
    %% intensity histogram
    figure(3);
    subplot('position',[0.89 0.55 0.1 0.4]);
    intensitybin=(p.mincps:50:p.maxcps);
    
    tmp=hist(totali+500,intensitybin);
    bar(intensitybin,tmp,1,'LineStyle','none','FaceColor',[.1 .1 .1]);hold on;
    tmp=hist(donor_sel(i,:),intensitybin);
    bar(intensitybin,tmp,1,'LineStyle','none','FaceColor',[0 1 0]);hold on;
    tmp=hist(acceptor_sel(i,:),intensitybin);
    bar(intensitybin,tmp,1,'LineStyle','none','FaceColor',[1 0 0]);alpha(.7);hold off;
    xlim([p.mincps p.maxcps]);
    
    view(90,270);
    set(gca,'FontSize',12,'LineWidth',0.5);
    grid on;    zoom on;
    
    %% intensity trace
    subplot('position',[0.1 0.55 0.77 0.4]);
    if p.num_bin ~= 0
        plot(time,donor_sel(i,:),'g',time,acceptor_sel(i,:),'r', time,((acceptor_sel(i,:)+donor_sel(i,:))+1000), 'k' );
        hold on;
        plot(bintime,binD,'b',bintime,binA,'y', bintime,((binA+binD)+1000), 'c' );
    else
        plot(time,donor_sel(i,:),'g',time,acceptor_sel(i,:),'r');
        hold on;
        plot(time,((acceptor_sel(i,:)+donor_sel(i,:))+1000), 'Color' , [.7 .7 .7]);
        plot(time,(totali_cut), 'Color' , [0 0 0 ]);
        hold off;
    end
    title(['  Molecule ' num2str(i) ' of ' num2str(N_mol_sel) ' (' fname ')'],'FontSize',12);
    legend(num2str(sorted_property(i))); legend boxoff;
    ylim([p.mincps p.maxcps]);
    xlim([p.t_window_in_trace(1) p.t_window_in_trace(2)]);
    ylabel('Intensity (AU)','FontSize',12,'FontWeight','bold');
    set(gca,'FontSize',12,'LineWidth',0.5);
    grid on;    zoom on;
    
    %% FRET histogram
    subplot(2,2,4);
    subplot('position',[0.89 0.1 0.1 0.4]);
    fretbin=(-0.1:0.02:1.1);
    tmp_hist=hist(fretE,fretbin);
    bar(fretbin(2:end-1),tmp_hist(2:end-1),1,'LineStyle','none','FaceColor',[.2 .2 .5]);
    xlim([-0.1 1.1]);
    view(90,270);
    grid on;
    zoom on;
    set(gca,'FontSize',12,'LineWidth',0.5);
    
    %% FRET trace
    subplot(2,2,3);
    subplot('position',[0.1 0.1 0.77 0.4]);
    if p.num_bin ~= 0
        plot(time,fretE,'color',[.4 .3 1],'LineWidth',0.5);
        hold on;
        plot(bintime,binE,'g','LineWidth',2);
    else
        plot(time,fretE,'color',[.8 .9 1]);hold on;
        plot(time,fretE_cut,'color',[.1 .1 .6]);
        if sum(~healthy_frames)
            plot(time(~healthy_frames),1,'.','color',[.1 .1 .6]);
        end
        hold off;
    end
    ylim([-0.1 1.1]);
    xlim([p.t_window_in_trace(1) p.t_window_in_trace(2)]);
    ylabel('FRET','FontSize',12,'FontWeight','bold');
    xlabel('Time (s)','FontSize',12,'FontWeight','bold');
    grid on;    zoom on;
    set(gca,'FontSize',12,'LineWidth',0.5);
    drawnow
    
    
    %% data manipulation
    user_ans=input('press p to back and k to save. ','s');
	
    if user_ans=='w'
        i=i-1;
        tstart=input('time window start... ');
        tend=input('time window end... '); 
        p.t_window_in_trace=[tstart tend];
        t_win_memory=1;
    end
    
    if user_ans=='p'
        if i==1
            i=0;
        else
            i=i-2;
        end
    end
    
    if user_ans=='g'
        i=input('put the molecule # ')-1;
    end
    
    if user_ans=='k'
        % mouse input
        [Xpos,~,~]=ginput;
        [num_clicked, ~]=size(Xpos);
        donor_segments=(0:0:0);
        acceptor_segments=(0:0:0);
        if num_clicked > 1
            for cur_s=1:2:num_clicked
                selected_index=time > Xpos(cur_s) & time < Xpos(cur_s+1);
                donor_segments=[donor_segments donor_sel(i,selected_index)];
                acceptor_segments=[acceptor_segments acceptor_sel(i,selected_index)];
            end
            [~, seg_size]=size(donor_segments);
            time_segments=(0:seg_size-1)*p.timeunit;
            output=[time_segments; donor_segments; acceptor_segments];
            bkrm_tr_name=[pth '\' fname ' tr' num2str(i) ' blink removed ' num2str(fileindex) '.dat'];
            bkrm_tr=fopen(bkrm_tr_name,'w');
            fileindex=fileindex+1;
            fprintf(bkrm_tr, '%g %g %g\n', output);
            fclose(bkrm_tr);
        end
    end
    
    if user_ans=='i' % save entire trace
%         output=[time; donor_sel(i,:); acceptor_sel(i,:)];
        output=[time(healthy_frames); donor_sel(i,healthy_frames); acceptor_sel(i,healthy_frames)];
        fidtemp=fopen([pth '\' fname ' tr' num2str(i) ' blink removed ' num2str(fileindex) '.dat'],'w');
        fprintf(fidtemp, '%g %g %g\n', output);
        fclose(fidtemp);
        fileindex=fileindex+1;
    end
    
    if user_ans=='s'
        i=i-1;
        p=get_parameters(p);
        [time, ~, ~, ~, acceptor_sel, donor_sel]=make_correction(p,len,donor_sel_org,acceptor_sel_org);
        [mol_pos_sel, acceptor_sel,donor_sel,sorted_property]=sort_molecules(mol_pos_sel, acceptor_sel,donor_sel,p.sortby);
        draw_avr_trace(donor_sel,acceptor_sel,time);
        draw_FRETvsInt(donor_sel,acceptor_sel);
        draw_int_hist(donor_sel,acceptor_sel,p);
    end
    
    if user_ans=='e'
        break;
    end
    
    if i==N_mol_sel
        % Construct a questdlg with three options
        choice = questdlg('There is no more molecule.', ...
            'Choose', ...
            'Finish','Go to the first','Go to the last','Finish');
        % Handle response
        switch choice
            case 'Finish'
                % do nothing...
            case 'Go to the first'
                i=0;
            case 'Go to the last'
                i=len-1;
        end
    end
end

function [time, donor_b, acceptor_b, acceptor_bg, acceptor_bgl, donor_bl]=make_correction(p,len,donor_org,acceptor_org)
%% make time vector
time=(0:(len-1))*p.timeunit;

%% BG correction
donor_b=donor_org-p.BG_d;
acceptor_b=acceptor_org-p.BG_a;

%% gamma correction
acceptor_bg=acceptor_b*p.gamma;

%% p.leakage correction
acceptor_bgl=acceptor_bg-donor_b*p.leakage;
donor_bl=donor_b+donor_b*p.leakage;


function p=get_parameters(p)
if nargin<1
    p.timeunit=0.1;
    p.maxcps=10000;
    p.mincps=-50;
    p.leakage=0.05;
    p.BG_d=0;
    p.BG_a=0;
    p.num_bin=0;
    p.total_int_range=[-Inf, Inf];
    p.t_check_point=-1;
    p.gamma=1.3;
    p.std_range=[-Inf Inf];
    p.sortby=1;
end
%%
if isempty(findobj('number',7924))
    p.fhd=figure(7924);clf;
    p.fhd.Position=[500 100 600 400];

    txt = uicontrol('Style','text',    'String','time unit (s)',...
        'Position',[20 350 100 20]);
    hdl.timeunit = uicontrol('Style','edit','Tag','timeunit','String',p.timeunit,...
        'Position',[120 350 60 20]);

    txt = uicontrol('Style','text',    'String','span for binning',...
        'Position',[20 320 100 20]);
    hdl.num_bin = uicontrol('Style','edit','Tag','num_bin',    'String',p.num_bin,...
        'Position',[120 320 60 20]);
    
    txt = uicontrol('Style','text',    'String','int. max on graph',...
        'Position',[20 290 100 20]);
    hdl.maxcps = uicontrol('Style','edit','Tag','maxcps',    'String',p.maxcps,...
        'Position',[120 290 60 20]);

    txt = uicontrol('Style','text',    'String','int. min on graph',...
        'Position',[20 260 100 20]);
    hdl.mincps = uicontrol('Style','edit','Tag','mincps',    'String',p.mincps,...
        'Position',[120 260 60 20]);


    txt = uicontrol('Style','text',    'String','Gamma',...
        'Position',[220 350 100 20]);
    hdl.gamma = uicontrol('Style','edit','Tag','gamma',    'String',p.gamma,...
        'Position',[320 350 60 20]);

    txt = uicontrol('Style','text',    'String','leakage',...
        'Position',[220 320 100 20]);
    hdl.leakage = uicontrol('Style','edit','Tag','leakage',    'String',p.leakage,...
        'Position',[320 320 60 20]);

    txt = uicontrol('Style','text',    'String','Donor BG',...
        'Position',[220 290 100 20]);
    hdl.BG_d = uicontrol('Style','edit','Tag','BG_d',    'String',p.BG_d,...
        'Position',[320 290 60 20]);

    txt = uicontrol('Style','text',    'String','Acceptor BG',...
        'Position',[220 260 100 20]);
    hdl.BG_a = uicontrol('Style','edit','Tag','BG_a',    'String',p.BG_a,...
        'Position',[320 260 60 20]);

    

    txt = uicontrol('Style','text',    'String','Int. cutoff max',...
        'Position',[420 350 100 20]);
    hdl.total_int_range2 = uicontrol('Style','edit','Tag','cutoff_max',    'String',p.total_int_range(2),...
        'Position',[520 350 60 20]);

    txt = uicontrol('Style','text',    'String','Int. cutoff min',...
        'Position',[420 320 100 20]);
    hdl.total_int_range1 = uicontrol('Style','edit','Tag','cutoff_min',    'String',p.total_int_range(1),...
        'Position',[520 320 60 20]);

    txt = uicontrol('Style','text',    'String','std. cutoff max',...
        'Position',[420 290 100 20]);
    hdl.std_range2 = uicontrol('Style','edit','Tag','std_max',    'String',p.std_range(2),...
        'Position',[520 290 60 20]);

    txt = uicontrol('Style','text',    'String','std. cutoff min',...
        'Position',[420 260 100 20]);
    hdl.std_range1 = uicontrol('Style','edit','Tag','std_min',    'String',p.std_range(1),...
        'Position',[520 260 60 20]);
    
    txt = uicontrol('Style','text',    'String','min survival point',...
        'Position',[420 230 100 20]);
    hdl.t_check_point = uicontrol('Style','edit','Tag','t_check_point',    'String',p.t_check_point,...
        'Position',[520 230 60 20]);

    txt = uicontrol('Style','text',    'String','Sort by',...
        'Position',[420 195 50 20]);

    hdl.sortby = uicontrol('Style','popup','Tag','sortby', 'String', {'None','Total intensity','std','Center to outer'},...
        'Position',[470 200 120 20]);
    
    % hdl.apply = uicontrol('Style','pushbutton',    'String','Apply',...
    %     'Position',[60 40 100 20]);
else
    figure(7924);   % calling again to bring the figure front
    hdl.timeunit = findobj('Tag','timeunit');
    hdl.maxcps = findobj('Tag','maxcps');
    hdl.mincps = findobj('Tag','mincps');
    hdl.leakage = findobj('Tag','leakage');
    hdl.BG_d = findobj('Tag','BG_d');
    hdl.BG_a = findobj('Tag','BG_a');
    hdl.num_bin = findobj('Tag','num_bin');
    hdl.total_int_range2 = findobj('Tag','cutoff_max');
    hdl.total_int_range1 = findobj('Tag','cutoff_min');
    hdl.std_range2 = findobj('Tag','std_max');
    hdl.std_range1 = findobj('Tag','std_min');
    hdl.t_check_point = findobj('Tag','t_check_point');
    hdl.gamma = findobj('Tag','gamma');
    hdl.sortby = findobj('Tag','sortby');
end
input('waiting for parameter editing...');

%%
p.timeunit=str2num(hdl.timeunit.String); 
p.maxcps=str2num(hdl.maxcps.String); 
p.mincps=str2num(hdl.mincps.String); 
p.leakage=str2num(hdl.leakage.String); 
p.BG_d=str2num(hdl.BG_d.String); 
p.BG_a=str2num(hdl.BG_a.String);
p.num_bin=str2num(hdl.num_bin.String);
p.total_int_range=[str2num(hdl.total_int_range1.String), str2num(hdl.total_int_range2.String)];
p.std_range=[str2num(hdl.std_range1.String), str2num(hdl.std_range2.String)];
p.total_int_range=p.total_int_range-p.BG_d-p.BG_a;
p.t_check_point=str2num(hdl.t_check_point.String);
p.gamma=str2num(hdl.gamma.String);
p.sortby=hdl.sortby.Value;

function draw_ccd_image(img_org,img_merged,mol_pos_sel,img_org_ext,img_merged_ext,roi)
if nargin<3
    disp_idv=0;
    mol_pos_sel=0;
else
    disp_idv=1;
end

if length(mol_pos_sel)==2
    FRET_mode=0;
else
    FRET_mode=1;
end

fhd_orgimg=figure(541);clf;
fhd_orgimg.Position(3:4)=[616,440];

%% draw whole image
subplot('Position',[0 0 0.65 0.7]);
image(img_org);axis image;
title('Raw image');axis off;

if disp_idv
    c_rad=7;
    pos = [ mol_pos_sel(2)-c_rad mol_pos_sel(1)-c_rad c_rad*2 c_rad*2]; 
    rectangle('Position',pos,'Curvature',[1 1],'EdgeColor','r');
    if FRET_mode
        pos = [ mol_pos_sel(4)-c_rad mol_pos_sel(3)-c_rad c_rad*2 c_rad*2]; 
        rectangle('Position',pos,'Curvature',[1 1],'EdgeColor','r');
    end
end

subplot('Position',[0.67 0 0.325 0.7]);
image(img_merged);axis image;
title('Merged');
axis off;

if disp_idv
    c_rad=8;
    pos = [ mol_pos_sel(2)-c_rad mol_pos_sel(1)-c_rad c_rad*2 c_rad*2]; 
    rectangle('Position',pos,'Curvature',[1 1],'EdgeColor',[1 1 0],'LineWidth',2);
end

%% draw idv image
if disp_idv
    % subplot(1,3,1);
    subplot('Position',[0.05 0.75 0.25 0.25]);
    image(img_org_ext( mol_pos_sel(1):mol_pos_sel(1)+roi*2,mol_pos_sel(2):mol_pos_sel(2)+roi*2   ,:));axis image;axis off;

    % subplot(1,3,2);
    if FRET_mode
        subplot('Position',[0.3 0.75 0.25 0.25]);
        image(img_org_ext( mol_pos_sel(3):mol_pos_sel(3)+roi*2,mol_pos_sel(4):mol_pos_sel(4)+roi*2   ,:));axis image;axis off;
    end
    
    % subplot(1,3,3);
    if FRET_mode
        subplot('Position',[0.7 0.75 0.25 0.25]);
        image(img_merged_ext( mol_pos_sel(1):mol_pos_sel(1)+roi*2,mol_pos_sel(2):mol_pos_sel(2)+roi*2   ,:));axis image;axis off;
    end
end

function draw_FRETvsInt(donor,acceptor)

tempD=mean(donor(:,(3:12)),2);
tempA=mean(acceptor(:,(3:12)),2);
total=(tempA+tempD);
elevel=tempA./total;

figure(2);
subplot(2,2,1);
hist(elevel,50);
grid on;
xlim([-0.1 1]);
ylabel('Count');
set(gca,'FontSize',12,'LineWidth',0.5);

subplot(2,2,4);
hist(total,50);
view(90,270);
grid on;
ylabel('Count');
title('Total intensity histogram');
set(gca,'FontSize',12,'LineWidth',0.5);

subplot (2,2,3);
plot(elevel, total,'b.','MarkerSize',5);
xlim([-0.1 1]);
grid on;
ylabel('Intensity');
xlabel('FRET');
title('intensity vs. FRET');
set(gca,'FontSize',12,'LineWidth',0.5);

function draw_int_hist(donor,acceptor,p)
if nargin<3
    p.mincps=0;
    p.maxcps=mean(donor(:)+acceptor(:))*4;
end

if p.maxcps<p.mincps
    p.maxcps=max(donor(:)+acceptor(:))*2;
end

xbin=p.mincps:10:p.maxcps;

figure(21)
subplot(3,2,1)
hist(mean(donor(:,2:11),2),100,'FaceColor','g');
h1 = findobj(gca,'Type','patch');
h1.FaceColor = [0 .6 0];
h1.LineStyle='none';
title('first 10 frames');
xlim([p.mincps-p.mincps/10, p.maxcps])
grid on;
subplot(3,2,2)
hist(mean(donor(:,end-10:end),2),100,'FaceColor','k');
h1 = findobj(gca,'Type','patch');
h1.FaceColor = [0 .6 0];
h1.LineStyle='none';
title('last 10 frames');
xlim([p.mincps-p.mincps/10, p.maxcps])
grid on;

subplot(3,2,3)
hist(mean(acceptor(:,2:11),2),100,'FaceColor','r');
h1 = findobj(gca,'Type','patch');
h1.FaceColor = [1 0 0];
h1.LineStyle='none';
grid on;
xlim([p.mincps-p.mincps/10, p.maxcps])

subplot(3,2,4)
hist(mean(acceptor(:,end-10:end),2),100,'FaceColor','k');
h1 = findobj(gca,'Type','patch');
h1.FaceColor = [1 0 0];
h1.LineStyle='none';
xlim([p.mincps-p.mincps/10, p.maxcps])
grid on;

subplot(3,2,5)
hist(mean(donor(:,2:11)+acceptor(:,2:11),2),100,'FaceColor','r');
h1 = findobj(gca,'Type','patch');
h1.FaceColor = [0.4 0.4 0.4];
h1.LineStyle='none';
xlabel('Intensity');
xlim([p.mincps-p.mincps/10, p.maxcps])
grid on;
subplot(3,2,6)
hist(mean(donor(:,end-10:end)+acceptor(:,end-10:end),2),100,'FaceColor','k');
h1 = findobj(gca,'Type','patch');
h1.FaceColor = [.4 .4 .4];
h1.LineStyle='none';
xlabel('Intensity');
grid on;
xlim([p.mincps-p.mincps/10, p.maxcps])


xlabel('Intensity');
 
function draw_avr_trace(donor,acceptor,time)
[~,len]=size(donor);
if nargin<3
    time=1:len;
    t_def='Time (fr)';
else
    t_def='Time (s)';
end

dAvg=mean(donor);
aAvg=mean(acceptor);

figure(1);
subplot(2,1,1);
tAvg=dAvg+aAvg;
plot(time,dAvg,'g',time,aAvg,'r',time,tAvg,'k');
title('Average intensity','FontSize',12);
grid on;
zoom on;
set(gca,'FontSize',12,'LineWidth',0.5);
ylabel('Intensity (AU)');

subplot(2,1,2);
plot(time,aAvg./tAvg,'b');
ylim([-0.1 1.1]);
grid on;
zoom on;
set(gca,'FontSize',12,'LineWidth',0.5);
xlabel(t_def);
ylabel('FRET');

function [mol_pos_sel, acceptor_sel,donor_sel,sorted_property]=sort_molecules(mol_pos_sel, acceptor_sel,donor_sel,sortby)
switch sortby
    case 1  % no sorting
        [N_mol,~]=size(mol_pos_sel);
        sorted_property=1:N_mol;
        return;
    case 2  % total intensity
        [sorted_property,sortid]=sort(mean(donor_sel,2)+mean(acceptor_sel,2));
    case 3  % std
        [sorted_property,sortid]=sort(std(donor_sel+acceptor_sel,0,2),'descend');
    case 4  % position from center
        center=[255,128];
        r= sqrt(( (mol_pos_sel(:,1)-center(1) )/2).^2 + (mol_pos_sel(:,2)-center(2) ).^2);
        [sorted_property,sortid]=sort(r);
end
mol_pos_sel=mol_pos_sel(sortid,:);
acceptor_sel=acceptor_sel(sortid,:);
donor_sel=donor_sel(sortid,:);














